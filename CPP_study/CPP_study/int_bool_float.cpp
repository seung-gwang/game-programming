//#include <iostream>
//using namespace std;
//
////정수
////변수 선언 --> 
////[타입] [이름] ;
////[타입[ [이름] = [초기값];
//
//
///***********정수***********/
////0이 아닌 초기값이 있으면 .data 영역
////초기값이 0이거나, 초기값이 없는 변수라면 .bss 영역
//int hp = 100;
//char a; //1 byte 정수 -128~127
//short b;//2 byte 정수 -32768 ~ 32767
//int c; //4 byte 정수  -21.4억 ~ 21.4억
//__int64 d; //8byte 정수 long long으로도 가능. 매우매우 큰 수
//
//unsigned char ua; //1 byte 부호없는 정수 0~255
//unsigned short ub;//2 byte 부호없는 정수 0 ~ 65535
//unsigned int uc; //4 byte 부호없는 정수  0 ~ 42.9억
//unsigned __int64 ud; //8byte 부호없는 정수 0 ~ 매우 매우 큰 수
////콘솔/모바일 게임은 메모리가 부족할 일이 많기 때문에
////숫자가 크지 않다면 작은 것을 써야함
////게임에서 hp같은 자주 쓰는 정보에서 4byte씩 낭비한다면
////동접자가 1만명 넘으면 4만 byte씩 낭비... <== 있으면 안되는 일...
//
//
///***********불리언***********/
////bool은 1 byte 정수
////Assembly에서는 bool은 없음 그냥 정수로 표현됨.
////bool은 보면 참,거짓 둘 중 하나라는 힌트를 직관적으로 알려줌(가독성 good)
////1 bit 짜리로 했으면 더 좋았을 수도 있겠지만, 
////어셈블리도 1 byte를 최소단위로 해서 그냥 1 byte로 함.
//bool isHighLevel = true;
//bool isPlayer = true;
//bool isMale = false;
//int isFemale = 1; //정수형으로 true <== 안좋은 가독성
//
//
///***********************실수 (부동소수점) **************************/
////IEEE 754 부동(浮動, 유동적으로 움직임)소수점 표현 표준 이용.
////Sign,Exponent,Fraction ==> 4byte(32bit == 1,8,23 / 64bit == 1,11,52)
//float attackSpeed = -3.375f; //4 byte...f를 붙여주지 않으면 double로 됨.
//double atackSpeed2 = 123.4123;//8 byte
////컴구시간에 배운거 remind 계산하는 법은 배웠던 프린트 참고할것!
////실제 메모리상에 표현된 비트패턴은 메모리에서 직접 볼 수 있는데, 
////little endian 방식으로 표현되어 있음에 유의할것.
////부동 소수점은 근사값, 실수 2개를 == 로 비교하는 것은 위험.
//
//
///**************************문자, 문자열****************************/
////문자와 문자열
//// char도 정수지만 '문자'의미를 나타내기 위해 사용
////char : 알파벳, 숫자 문자를 나타냄
////wchar_t : 유니코드 문자를 나타냄
//char ch = 97;
//
//int main2()//main
//{   
//    /*************************정수*************************/
//    //정수 overflow / underflow
//    b = 32767;
//    b = b + 1; // 32768 ?
//    cout << b << endl; //-32768...범위에 신경써야한다. 
//    
//    //hp출력
//    cout << "체력이" << hp << " 남았습니다." << endl;
//    /*********************************************************/
//
//    /************************* 불리언 bool *************************/
//    cout << isHighLevel << endl;
//
//    /*char string*/
//    cout << "Char ch: 97 ==> " ch << " " << endl;
//}
//
